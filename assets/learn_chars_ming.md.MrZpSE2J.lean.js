import{_ as d}from"./chunks/Chaifen.vue_vue_type_script_setup_true_lang.Dj4ye5qr.js";import{c as i,o as l,a2 as e,m as t,H as c}from"./chunks/framework.D5VGNaZP.js";import"./chunks/index.esm.DcL13wi7.js";const s={class:"tip custom-block"},g=JSON.parse('{"title":"日月输入法单字编码","description":"","frontmatter":{},"headers":[],"relativePath":"learn/chars_ming.md","filePath":"learn/chars_ming.md"}'),a={name:"learn/chars_ming.md"},h=Object.assign(a,{setup(r){return(p,o)=>(l(),i("div",null,[o[7]||(o[7]=e('<h1 id="日月输入法单字编码" tabindex="-1">日月输入法单字编码 <a class="header-anchor" href="#日月输入法单字编码" aria-label="Permalink to &quot;日月输入法单字编码&quot;">​</a></h1><p>学习了宇浩系列输入法的拆分规则后，我们可以将任何一个汉字拆成唯一的字根组合。现在，我们讨论如何把字根组合转为单字编码。</p><h2 id="取最多四根" tabindex="-1">取最多四根 <a class="header-anchor" href="#取最多四根" aria-label="Permalink to &quot;取最多四根&quot;">​</a></h2><p>在日月输入法中，无论一个字能拆成几个字根，我们只关心其中的<strong>四个根</strong>，分别是：</p><ul><li>第一根：首根</li><li>第二根：二根</li><li>第三根：三根</li><li>倒数第一根：末根</li></ul><p>这同五笔字型相同，和郑码、徐码不同。如果一个字不满四根，则按首、末、二、三的优先级称呼它们，比如：</p><ul><li><code>木</code> 可以拆为<code>木</code>一个字根，故而<code>木</code>是<strong>单根字</strong>，又称<strong>字根字</strong>。</li><li><code>根</code> 可以拆为<code>木艮</code>两个字根，故而<code>木</code>是首根、<code>艮</code>是末根。它没有二、三根。</li><li><code>想</code> 可以拆为<code>木目心</code>三个字根，故而<code>木</code>是首根、<code>目</code>是二根、<code>心</code>是末根。它没有三根。</li><li><code>整</code> 可以拆为<code>木口夂正</code>四个字根，故而<code>木</code>是首根、<code>口</code>是次根、<code>夂</code>是三根、<code>正</code>是末根。</li><li><code>籍</code> 可以拆为<code>𥫗丰八龷日</code>五个字根。我们只关注「首二三末」这四个字根，故而<code>𥫗</code>是首根、<code>丰</code>是次根、<code>八</code>是三根、<code>日</code>是末根。<code>龷</code>这个根我们不管它。</li></ul><h2 id="编码规则" tabindex="-1">编码规则 <a class="header-anchor" href="#编码规则" aria-label="Permalink to &quot;编码规则&quot;">​</a></h2><p>接下来我们学习单字的编码规则，也就是如何把字根的编码转变为单字编码。</p><p>如果一个字本身就是字根，那么它的单字编码就是字根编码，不言而谕。</p><div class="tip custom-block"><p class="custom-block-title">例</p><ul><li><code>弋</code> 的编码就是对应的字根编码：<code>Ki</code>，其中<code>K</code>是大码、<code>i</code>是韵码。它是零声母，故而没有声码。</li><li><code>木</code> 的编码就是对应的字根编码：<code>Sme</code>，其中<code>S</code>是大码、<code>m</code>是声码、<code>e</code>是韵码。</li><li><code>骨</code> 的编码就是对应的字根编码：<code>Jgu</code>，其中<code>J</code>是大码、<code>g</code>是声码、<code>u</code>是韵码。</li></ul></div><p>如果一个字是由多个字根组成的，即<strong>多根字</strong>，它的编码规则为：</p><ol><li>取首根大码和声码。</li><li>取二、三字根的大码。</li><li>取末根的所有码。</li><li>最多取五码。</li></ol>',13)),t("div",s,[o[0]||(o[0]=e('<p class="custom-block-title">例</p><p><code>认</code>字拆成<code>讠人</code>，只有两根，所以我们取全部根：首根<code>讠</code>、末根<code>人</code>。根据规则，我们取首根的大码 <code>V</code> 和声码（空），然后取末根的所有码 <code>Wo</code>，得到编码<code>VWo</code>。因此，<code>认</code>字的编码是<code>VWo</code>。</p>',2)),c(d,{char:"认",parts:[2,2]}),o[1]||(o[1]=e("<p><code>好</code>字拆成<code>女子</code>，只有两根，所以我们取全部根：首根<code>女</code>、末根<code>子</code>。根据规则，我们取首根的大码 <code>C</code> 和声码 <code>n</code>，然后取末根的所有码 <code>Lzi</code>，得到编码<code>CnLzi</code>。因此，<code>好</code>字的编码是<code>CnLzi</code>。</p>",1)),c(d,{char:"好",parts:[3,3]}),o[2]||(o[2]=e("<p><code>但</code>字拆成<code>亻日一</code>，只有三根，所以我们取全部根：首根<code>亻</code>、二根<code>日</code>、末根<code>一</code>。根据规则，我们取首根的大码 <code>W</code> 和声码（空），然后取二根的大码 <code>J</code>，最后取末根的所有码 <code>Fi</code>，得到编码<code>WJFi</code>。因此，<code>但</code>字的编码是<code>WJFi</code>。</p>",1)),c(d,{char:"但",parts:[2,4,1]}),o[3]||(o[3]=e("<p><code>算</code>字拆成<code>竹目卄</code>，只有三根，所以我们取全部根：首根<code>竹</code>、二根<code>目</code>、末根<code>廾</code>。根据规则，我们取首根的大码 <code>Y</code> 和声码 <code>s</code>，然后取二根的大码 <code>G</code>，最后取末根的所有码 <code>Mci</code>，得到编码<code>YsGMci</code>。注意到，这超过了五码，而我们只取前五码<code>YsGMc</code>。因此，<code>算</code>字的编码是<code>GzJSo</code>。</p>",1)),c(d,{char:"算",parts:[6,5,3]}),o[4]||(o[4]=e("<p><code>织</code>字拆成<code>纟口八</code>，只有三根，所以我们取全部根: 首根<code>纟</code>、二根<code>口</code>、末根<code>八</code>。根据规则，我们取首根的大码 <code>K</code> 和声码 <code>s</code>，然后取二根的大码 <code>D</code>，最后取末根的所有码 <code>Kba</code>，得到编码<code>KsDKba</code>。注意到，这超过了五码， 而我们只取前五码<code>KsDKb</code>。因此，<code>织</code>字的编码是<code>KsDKb</code>。</p>",1)),c(d,{char:"织",parts:[3,3,2]}),o[5]||(o[5]=e("<p><code>嫩</code>字拆成<code>女木口夂</code>，分别对应了首根<code>女</code>、二根<code>木</code>、三根<code>口</code>、末根<code>夂</code>。根据规则，我们取首根的大码 <code>C</code> 和声码 <code>n</code>，然后取二根的大码 <code>S</code>，接着取三根的大码 <code>D</code>，最后取末根的所有码 <code>Tpe</code>，得到编码<code>CnSDTpe</code>。注意到，这超过了五码，而我们只取前五码<code>CnSDT</code>。因此，<code>嫩</code>字的编码是<code>CnSDT</code>。</p>",1)),c(d,{char:"嫩",parts:[3,1,3,3,4],colors:[1,2,3,2,4]}),o[6]||(o[6]=e("<p><code>籍</code>字拆成<code>𥫗丰八龷日</code>，超过了四根，我们只取四根：首根<code>𥫗</code>、二根<code>丰</code>、三根<code>八</code>、末根<code>日</code>。根据规则，我们取首根的大码 <code>Y</code> 和声码 <code>s</code>，然后取二根的大码 <code>J</code>，接着取三根的大码 <code>K</code>，最后取末根的所有码 <code>Ji</code>，得到编码<code>YsJKJi</code>。注意到，这超过了五码，而我们只取前五码<code>YsJKJ</code>。因此，<code>籍</code>字的编码是<code>YsJKJ</code>。</p>",1)),c(d,{char:"籍",parts:[6,4,2,4,4],colors:[1,2,3,4,5]})]),o[8]||(o[8]=e('<p>你可能注意到了，在日月输入法中，每个汉字的编码不超过<strong>5个字母</strong>。更具体地，一个字可以是2码、3码、4码、或5码。</p><h2 id="空格键的使用" tabindex="-1">空格键的使用 <a class="header-anchor" href="#空格键的使用" aria-label="Permalink to &quot;空格键的使用&quot;">​</a></h2><p>在很多输入法软件中，空格键（以下用<code>_</code>表示）用来上屏没有达到最大长度的候选字。而在日月输入法中，空格键基本是不需要使用的。这归功于日月输入法的<strong>无空格输入</strong>设计。具体地说：</p><ol><li>一个字的编码等于 5 时，已经是最大长度，无需按空格键上屏。只要继续输入下一个字的首码，这个字就会自动上屏。我们称之为<strong>六码顶屏</strong>（请参阅<a href="./../docs/concepts.html">琼林撷英</a>了解相关概念）。例如：我们打「整理」二字，「整」字的编码是<code>SmDTL</code>。输入<code>SmDTL</code>后，我们直接输入「理」字的首码<code>P</code>，则「整」字会自动上屏。</li><li>一个字的编码低于 5 时，它一定是以 <code>aoeiu</code> 五个字母结尾的。因此上，只要输入法软件见到这五个字母，就知道一个字已经输完，将它上屏。比如「认」字，编码是<code>VWo</code>，输入<code>o</code>的瞬间，「认」字就会自动上屏。</li></ol><p>空格键只需在以下情况使用：</p><ol><li>一个字虽然已经输完，但由于有其它候选，不能自动上屏，且后续没有其他字或标点需要输入，这时候需要按空格键（或数字1）上屏首选。</li><li>为输入效率考量，日月输入法设置了一些特殊<strong>简码</strong>，它们的编码不以<code>aoeiu</code>结尾，这时候需要按空格键（或数字1）上屏首选。当然，这些简码字的使用是可选的，也可以将它们屏蔽。</li></ol>',6))]))}});export{g as __pageData,h as default};
