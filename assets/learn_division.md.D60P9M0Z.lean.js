import{_ as c}from"./chunks/Chaifen.vue_vue_type_script_setup_true_lang.DgF6BSeS.js";import{c as t,m as o,J as l,a as e,a4 as s,o as d}from"./chunks/framework.vM2YJXtg.js";const a=o("h1",{id:"单字拆分",tabindex:"-1"},[e("单字拆分 "),o("a",{class:"header-anchor",href:"#单字拆分","aria-label":'Permalink to "单字拆分"'},"​")],-1),_=o("h2",{id:"汉字拼图",tabindex:"-1"},[e("汉字拼图 "),o("a",{class:"header-anchor",href:"#汉字拼图","aria-label":'Permalink to "汉字拼图"'},"​")],-1),i=o("p",null,"先前说过，拆字，就是把汉字按照一定的规则，拆成唯一的字根组合。这个过程如同拼图一般，大多数时候，是非常直观而自然的。",-1),n={class:"tip custom-block"},r=o("p",{class:"custom-block-title"},"例",-1),p={class:"flex justify-left flex-wrap"},h=o("p",null,"这种将字拆成直观的、分离的部件的方法，足以应付大部分汉字的拆分了。但在实际使用中，遇到这个问题：一个独体字，本身不是字根，怎么办？这时候，我们要把它继续拆成更小的字根甚至笔划。",-1),u={class:"tip custom-block"},f=s("",4),T={class:"flex justify-left flex-wrap"},x=o("p",null,[e("有时候，独体字的拆分不是很直观。比如"),o("code",null,"再"),e("可以拆成"),o("code",null,"一冂土"),e("，也可以拆成"),o("code",null,"王冂"),e("。遇到此类字时的拆分，往往需要一些经验和练习。所以当你遇到不会拆的字时，应该主动查询它的编码，及时学习。")],-1),m=o("p",null,[e("更麻烦的情况是，"),o("strong",null,"一个字好像有几种拆分方法"),e("。")],-1),b={class:"tip custom-block"},k=o("p",{class:"custom-block-title"},"例",-1),v=o("p",null,[o("code",null,"井"),e("，可以拆"),o("code",null,"二{介下}"),e("，也可以拆"),o("code",null,"一廾"),e("。")],-1),P={class:"flex justify-left flex-wrap"},S=o("p",null,[o("code",null,"单"),e("可以拆成"),o("code",null,"丷日十"),e("也可以拆成"),o("code",null,"丷冂丰"),e("。")],-1),A={class:"flex justify-left flex-wrap"},V=o("p",null,[o("code",null,"主"),e("可以拆成"),o("code",null,"丶王"),e("也可以拆成"),o("code",null,"亠土"),e("。")],-1),y={class:"flex justify-left flex-wrap"},j=s("",7),w={class:"tip custom-block"},C=o("p",{class:"custom-block-title"},"例",-1),I=o("p",null,[o("code",null,"国"),e("如果完全符合笔顺，应该拆成"),o("code",null,"冂王丶一"),e("，是四个字根。但拆成"),o("code",null,"囗王丶"),e("，只用三个字根就够了。因为「少」优先级高于「顺」，所以应该拆成"),o("code",null,"囗王丶"),e("。")],-1),q={class:"flex justify-left flex-wrap"},N=o("p",null,[o("code",null,"國"),e("如果完全符合笔顺，应该拆成"),o("code",null,"冂一口一丿丶一"),e("，是七个字根。但拆成"),o("code",null,"囗戈口一"),e("，只用四个字根就够了。因为「少」优先级高于「顺」，所以应该拆成"),o("code",null,"囗戈口一"),e("。")],-1),D={class:"flex justify-left flex-wrap"},E=o("h2",{id:"结构完整",tabindex:"-1"},[e("结构完整 "),o("a",{class:"header-anchor",href:"#结构完整","aria-label":'Permalink to "结构完整"'},"​")],-1),R=o("p",null,[e("结构完整，指的是"),o("code",null,"囗日目勹冂匚コ凵"),e("等存在全包围和半包围结构的字根不拆散。")],-1),g=o("p",null,"这个原则的设置，是为了不过分破坏汉字的整体性和直观性。",-1),B={class:"tip custom-block"},J=o("p",{class:"custom-block-title"},"例",-1),O=o("p",null,[o("code",null,"昜"),e("拆"),o("code",null,"日一勹彡"),e("不拆"),o("code",null,"日丆𠃌彡"),e("。")],-1),$={class:"flex justify-left flex-wrap"},z=o("p",null,[o("code",null,"单"),e("可以拆成"),o("code",null,"丷日十"),e("也可以拆成"),o("code",null,"丷冂丰"),e("。两者都是三根。因为包围结构不拆散，故而"),o("code",null,"单"),e("拆成"),o("code",null,"丷日十"),e("。")],-1),F={class:"flex justify-left flex-wrap"},G=o("p",null,[o("code",null,"免"),e("可以拆成"),o("code",null,"⺈口儿"),e("也可以拆成"),o("code",null,"⺈冂尢"),e("。两者都是三根。因为包围结构不拆散，故而"),o("code",null,"免"),e("拆成"),o("code",null,"⺈口儿"),e("。")],-1),H={class:"flex justify-left flex-wrap"},K=o("p",null,[o("code",null,"万"),e("拆成"),o("code",null,"一勹"),e("而非"),o("code",null,"{一丿}乛"),e("。因为前者不仅完全符合笔顺，同时也保持了结构完整。")],-1),L={class:"flex justify-left flex-wrap"},M=o("p",null,[o("code",null,"匹"),e("拆"),o("code",null,"匚儿"),e("而不拆"),o("code",null,"兀乚"),e("，因为前者结构完整。")],-1),Q={class:"flex justify-left flex-wrap"},U=s("",6),W={class:"tip custom-block"},X=o("p",{class:"custom-block-title"},"例",-1),Y=o("p",null,[o("code",null,"来"),e("可以拆成"),o("code",null,"一米"),e("也可以拆成"),o("code",null,"未丷"),e("，都是两根，但拆成"),o("code",null,"一米"),e("完全符合笔顺。")],-1),Z={class:"flex justify-left flex-wrap"},oo=o("p",null,[o("code",null,"聿"),e("可以拆成"),o("code",null,"彐キ"),e("也可以拆成"),o("code",null,"肀二"),e("，都是两根，但拆成"),o("code",null,"彐キ"),e("完全符合笔顺。")],-1),eo={class:"flex justify-left flex-wrap"},co=s("",6),lo={class:"tip custom-block"},so=o("p",{class:"custom-block-title"},"例",-1),to=o("p",null,[o("code",null,"主"),e("可以拆成"),o("code",null,"丶王"),e("也可以拆成"),o("code",null,"亠土"),e("。观察到，"),o("code",null,"丶王"),e("是散开的，而"),o("code",null,"亠土"),e("是相连的，后者符合「能散不连」。")],-1),ao={class:"flex justify-left flex-wrap"},_o=o("h3",{id:"能连不交",tabindex:"-1"},[e("能连不交 "),o("a",{class:"header-anchor",href:"#能连不交","aria-label":'Permalink to "能连不交"'},"​")],-1),io=o("p",null,"两个字根互相分离，优于两个字根互相交叉。",-1),no={class:"tip custom-block"},ro=o("p",{class:"custom-block-title"},"例",-1),po=o("p",null,[o("code",null,"开"),e("可以拆成"),o("code",null,"一廾"),e("也可以拆成"),o("code",null,"二{介下}"),e("。观察到，第一种拆法字根相连，第二种拆法字根相交。故而拆成"),o("code",null,"一廾"),e("符合「能连不交」。")],-1),ho={class:"flex justify-left flex-wrap"},uo=o("h3",{id:"能交不断",tabindex:"-1"},[e("能交不断 "),o("a",{class:"header-anchor",href:"#能交不断","aria-label":'Permalink to "能交不断"'},"​")],-1),fo=o("p",null,"两个字根互相交叉，优于将笔画断开。",-1),To={class:"tip custom-block"},xo=s("",2),mo={class:"flex justify-left flex-wrap"},bo=s("",3),ko={class:"tip custom-block"},vo=o("p",{class:"custom-block-title"},"例",-1),Po=o("p",null,[o("code",null,"我"),e("拆作"),o("code",null,"丿扌戈"),e("，不拆成"),o("code",null,"丿扌乚丿丶"),e("。虽然前者将中间的横断开了，但因为「字根最少」，我们选择只有三根的"),o("code",null,"丿扌戈"),e("。")],-1),So={class:"flex justify-left flex-wrap"},Ao=o("p",null,[o("code",null,"熏"),e("拆作"),o("code",null,"千黑"),e("，不拆成"),o("code",null,"千囗丷二灬"),e("。虽然前者将中间的竖断开了，但因为「字根最少」，我们选择只有两根的"),o("code",null,"千黑"),e("。")],-1),Vo={class:"flex justify-left flex-wrap"},yo=s("",7),jo={class:"tip custom-block"},wo=o("p",{class:"custom-block-title"},"例",-1),Co=o("p",null,[o("code",null,"失"),e("拆"),o("code",null,"丿夫"),e("而不拆"),o("code",null,"牛乀"),e("，因为"),o("code",null,"牛"),e("的一竖是撇。故而对"),o("code",null,"夫"),e("取大。")],-1),Io={class:"flex justify-left flex-wrap"},qo=o("p",null,[o("code",null,"井"),e("拆"),o("code",null,"二{介下}"),e("而不拆"),o("code",null,"キ丨"),e("，因为"),o("code",null,"キ"),e("的一竖是撇。故而对"),o("code",null,"{介下}"),e("取大。")],-1),No={class:"flex justify-left flex-wrap"},Do=s("",2),Eo={class:"flex justify-left flex-wrap"},Ro=o("p",null,[o("code",null,"缓"),e("拆"),o("code",null,"纟爪干又"),e("而不拆"),o("code",null,"纟爪二夂"),e("。虽然前者"),o("code",null,"干"),e("的竖是撇，但后者出现了「字根相交」。根据规则优先级，「字根相交」低于「字根相连」，故而拆为"),o("code",null,"纟爪干又"),e("。")],-1),go={class:"flex justify-left flex-wrap"},Bo=s("",6),Jo={class:"tip custom-block"},Oo=o("p",{class:"custom-block-title"},"例",-1),$o=o("p",null,[o("code",null,"夬"),e("拆为"),o("code",null,"ユ人"),e("，而不拆成"),o("code",null,"乛大"),e("，因为「字根取大」原则。让首笔靠前的字根的笔划数尽量地多，这里，"),o("code",null,"ユ"),e("的笔画数大于"),o("code",null,"乛"),e("。")],-1),zo={class:"flex justify-left flex-wrap"},Fo=o("p",null,[o("code",null,"丈"),e("拆为"),o("code",null,"𠂇丶"),e("，而不拆成"),o("code",null,"一乂"),e("，因为「字根取大」原则。让首笔靠前的字根的笔划数尽量地多，这里，"),o("code",null,"𠂇"),e("的笔画数大于"),o("code",null,"一"),e("。")],-1),Go={class:"flex justify-left flex-wrap"},Ho=s("",5),Ko={class:"tip custom-block"},Lo=o("p",{class:"custom-block-title"},"例",-1),Mo=s("",2),Qo=o("code",null,"盡",-1),Uo=o("code",null,"コ土灬皿",-1),Wo=o("code",null,"乛龶灬皿",-1),Xo=o("code",null,"彐丄灬皿",-1),Yo=o("code",null,"{聿上}一灬皿",-1),Zo=o("ul",null,[o("li",null,"都是四根，同时满足「字根最少」。"),o("li",null,[o("code",null,"コ土灬皿"),e("不符合笔顺，其他三者都完全符合笔顺。淘汰"),o("code",null,"コ土灬皿"),e("。")]),o("li",null,"上半部分都出现字根相交情况。"),o("li",null,"都不适用「结构合理」。"),o("li",null,[e("进入兜底规则「字根取大」。根据规则，只要其中某个字根多写一笔仍然符合笔顺，就多写一笔。观察到，"),o("code",null,"{聿上}一灬皿"),e("的第一根一共写了四笔，故而胜出。")])],-1),oe={class:"flex justify-left flex-wrap"},ee=o("code",null,"曱",-1),ce=o("code",null,"甴",-1),le=s("",1),se={class:"flex justify-left flex-wrap"},te=s("",3),pe=JSON.parse('{"title":"单字拆分","description":"","frontmatter":{},"headers":[],"relativePath":"learn/division.md","filePath":"learn/division.md"}'),de={name:"learn/division.md"},he=Object.assign(de,{setup(ae){return(_e,ie)=>(d(),t("div",null,[a,_,i,o("div",n,[r,o("div",p,[l(c,{char:"糧",parts:[6,4,1,7]}),l(c,{char:"錘",parts:[8,3,4,1]}),l(c,{char:"錢",parts:[8,4,4]}),l(c,{char:"瓶",parts:[3,3,4]}),l(c,{char:"琴",parts:[4,4,2,1,1]}),l(c,{char:"鴿",parts:[6,11]})])]),h,o("div",u,[f,o("div",T,[l(c,{char:"戋",parts:[1,4]}),l(c,{char:"丸",parts:[2,1]}),l(c,{char:"朱",parts:[4,2]})])]),x,m,o("div",b,[k,v,o("div",P,[l(c,{char:"井",parts:[1,3]}),e(" ❓ "),l(c,{char:"井",parts:[2,2]}),e(" ❓ "),l(c,{char:"井",parts:[3,1]}),e(" ❓ ")]),S,o("div",A,[l(c,{char:"单",parts:[2,4,2]}),e(" ❓ "),l(c,{char:"单",parts:[2,2,1,1,2],colors:[1,2,3,2,3]}),e(" ❓ "),l(c,{char:"单",parts:[2,2,4]}),e(" ❓ ")]),V,o("div",y,[l(c,{char:"主",parts:[1,4]}),e(" ❓ "),l(c,{char:"主",parts:[2,3]}),e(" ❓ "),l(c,{char:"主",parts:[1,3,1],colors:[1,2,1]}),e(" ❓ ")])]),j,o("div",w,[C,I,o("div",q,[l(c,{char:"国",parts:[2,4,1,1],colors:[1,2,3,1]}),e(" ✅ "),l(c,{char:"国",parts:[2,4,1,1]}),e(" ❌ ")]),N,o("div",D,[l(c,{char:"國",parts:[2,1,3,1,3,1],colors:[1,2,3,4,2,1]}),e(" ✅ "),l(c,{char:"國",parts:[2,1,3,1,1,1,1,1]}),e(" ❌ ")])]),E,R,g,o("div",B,[J,O,o("div",$,[l(c,{char:"昜",parts:[4,1,2,2]}),e(" ✅ "),l(c,{char:"昜",parts:[4,2,1,2]}),e(" ❌ ")]),z,o("div",F,[l(c,{char:"单",parts:[2,4,2]}),e(" ✅ "),l(c,{char:"单",parts:[2,2,4]}),e(" ❌ ")]),G,o("div",H,[l(c,{char:"免",parts:[2,3,2]}),e(" ✅ "),l(c,{char:"免",parts:[2,2,3]}),e(" ❌ ")]),K,o("div",L,[l(c,{char:"万",parts:[1,2]}),e(" ✅ "),l(c,{char:"万",parts:[1,1,1],colors:[1,2,1]}),e(" ❌ ")]),M,o("div",Q,[l(c,{char:"匹",parts:[1,2,1],colors:[1,2,1]}),e(" ✅ "),l(c,{char:"匹",parts:[3,1]}),e(" ❌ ")])]),U,o("div",W,[X,Y,o("div",Z,[l(c,{char:"来",parts:[1,6]}),e(" ✅ "),l(c,{char:"来",parts:[1,2,4],colors:[1,2,1]}),e(" ❌ ")]),oo,o("div",eo,[l(c,{char:"聿",parts:[3,3]}),e(" ✅ "),l(c,{char:"聿",parts:[3,2,1],colors:[1,2,1]}),e(" ❌ ")])]),co,o("div",lo,[so,to,o("div",ao,[l(c,{char:"主",parts:[1,4]}),e(" ✅ "),l(c,{char:"主",parts:[2,3]}),e(" ❌ ")])]),_o,io,o("div",no,[ro,po,o("div",ho,[l(c,{char:"开",parts:[1,3]}),e(" ✅ "),l(c,{char:"开",parts:[2,2]}),e(" ❌ ")])]),uo,fo,o("div",To,[xo,o("div",mo,[l(c,{char:"果",parts:[4,4]}),e(" ✅ "),l(c,{char:"果",parts:[4,1,1,2],colors:[1,2,0,2]}),e(" ❌ ")])]),bo,o("div",ko,[vo,Po,o("div",So,[l(c,{char:"我",parts:[1,1,2,3],colors:[1,0,2,3,5,1]}),e(" ✅ "),l(c,{char:"我",parts:[1,3,1,1,1]}),e(" ❌ ")]),Ao,o("div",Vo,[l(c,{char:"熏",parts:[2,5,1,6],colors:[1,2,0,2,3,5,1]}),e(" ✅ "),l(c,{char:"熏",parts:[2,2,2,1,1,2,4],colors:[1,2,3,2,1,4,5]}),e(" ❌ ")])]),yo,o("div",jo,[wo,Co,o("div",Io,[l(c,{char:"失",parts:[1,4]}),e(" ✅ "),l(c,{char:"失",parts:[4,1],colors:[1,2]}),e(" ❌ ")]),qo,o("div",No,[l(c,{char:"井",parts:[2,2]}),e(" ✅ "),l(c,{char:"井",parts:[3,1]}),e(" ❌ ")]),Do,o("div",Eo,[l(c,{char:"严",parts:[1,5,1]}),e(" ✅ "),l(c,{char:"严",parts:[3,2,2]}),e(" ❌ "),l(c,{char:"严",parts:[3,3,1]}),e(" ❌ ")]),Ro,o("div",go,[l(c,{char:"缓",parts:[3,4,3,2]}),e(" ✅ "),l(c,{char:"缓",parts:[3,4,2,3]}),e(" ❌ ")])]),Bo,o("div",Jo,[Oo,$o,o("div",zo,[l(c,{char:"夬",parts:[2,2]}),e(" ✅ "),l(c,{char:"夬",parts:[1,3]}),e(" ❌ ")]),Fo,o("div",Go,[l(c,{char:"丈",parts:[2,1]}),e(" ✅ "),l(c,{char:"丈",parts:[1,2]}),e(" ❌ ")])]),Ho,o("div",Ko,[Lo,o("ol",null,[Mo,o("li",null,[e("又一例："),Qo,e("。候选拆分"),Uo,e(),Wo,e(),Xo,e(),Yo,e("四种。 "),Zo,o("div",oe,[l(c,{char:"盡",parts:[4,1,4,5]}),e(" ✅ "),l(c,{char:"盡",parts:[3,2,4,5]}),e(" ❌ ")])]),o("li",null,[e("又一例："),ee,e(" yuē "),ce,e(" yóu。 "),le,o("div",se,[l(c,{char:"曱",parts:[4,1]}),e(" ✅ "),l(c,{char:"甴",parts:[2,1,2],colors:[1,2,1]}),e(" ✅ ")])])])]),te]))}});export{pe as __pageData,he as default};
