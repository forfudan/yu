import{_ as l}from"./chunks/Chaifen.vue_vue_type_script_setup_true_lang.Tg7FitTN.js";import{_ as t}from"./chunks/MultiChaifen.vue_vue_type_script_setup_true_lang.BgcfZadL.js";import{c as d,m as o,J as e,a as c,a4 as s,o as a}from"./chunks/framework.rq0FYgLR.js";import"./chunks/share.Nrbaa2_l.js";const _=s('<h1 id="进阶讨论" tabindex="-1">进阶讨论 <a class="header-anchor" href="#进阶讨论" aria-label="Permalink to &quot;进阶讨论&quot;">​</a></h1><h2 id="字形差异" tabindex="-1">字形差异 <a class="header-anchor" href="#字形差异" aria-label="Permalink to &quot;字形差异&quot;">​</a></h2><p>汉字具有多态性。同一个汉字，在不同的标准、不同的字体下，存在一定的差别。有些字形上的差别，通过 Unicode 的离散来实现。比如<code>户</code> <code>戶</code> <code>戸</code>三字，在 Unicode 里被安排在了不同的码位上，故而实现了分离。但是很多汉字的不同字形，却共用 Unicode 码位（这其实是 CJK 的初衷），那么这个字到底应该依照哪个标准来拆分，便成了问题。</p><p>宇浩输入法的规定是：</p><ul><li>每个字都有一种<strong>标准拆法</strong>，字形标准取自：The Unicode Standard, Version 15.0。各地区优先级降序为：GTHJKV，即陆、台、港、日、韩、越。也就是说，如果存在大陆提交的标准，就依照大陆标准。如果大陆没有提交标准，就按照台湾标准。依此类推。</li><li>每个字都可能有若干<strong>兼容拆法</strong>，目的是兼容台湾、香港、大陆古籍的字形标准。比如<code>起</code> = <code>走己</code>（大陆标准）和 <code>起</code> = <code>走巳</code>（台湾标准）兼收。</li></ul><p>宇浩输入法的笔顺选取，依照大陆标准《GF 3003-1999 GB13000.1 字符集汉字字序（笔画序）规范》。同时，也兼容台湾标准的笔顺。</p>',6),i={class:"tip custom-block"},n=o("p",{class:"custom-block-title"},"例",-1),r=o("p",null,[c("比如"),o("code",null,"攀 = 木乂乂木手"),c("（大陆标准）和"),o("code",null,"攀 = 乂乂木木手"),c("（台湾标准）兼收。")],-1),h={class:"flex justify-left flex-wrap"},p=o("p",null,[c("比如"),o("code",null,"與 = ⺽丂丄八"),c("（大陆标准）和"),o("code",null,"與 = 丂丿⺽一八"),c("（台湾标准）兼收。")],-1),u={class:"flex justify-left flex-wrap"},f=o("h2",{id:"书体差异",tabindex:"-1"},[c("书体差异 "),o("a",{class:"header-anchor",href:"#书体差异","aria-label":'Permalink to "书体差异"'},"​")],-1),x=o("p",null,"某些字根，即使在相同的规范下，也会楷体和宋体的不同而产生微小差异。这些差异往往会影响对于「散」「连」的判断。我们主要以宋体为准（也是 CJK 的书体）进行拆分，同时有以下考量。",-1),m={class:"info custom-block"},b=o("p",{class:"custom-block-title"},"散连认定",-1),T=o("p",null,[o("code",null,"⼇"),c("作头时的"),o("code",null,"丶一"),c("，无论书体，一概视为「散」。")],-1),k={class:"flex justify-left flex-wrap"},v=o("p",null,[o("code",null,"䒑"),c("作头时的"),o("code",null,"丷一"),c("是"),o("code",null,"艹"),c("的草化，无论书体，一概视为「连」。")],-1),P={class:"flex justify-left flex-wrap"},A=o("p",null,[o("code",null,"龷"),c("在字中时的"),o("code",null,"艹一"),c("，无论书体，一概视为「连」。")],-1),S={class:"flex justify-left flex-wrap"},w=s('<h2 id="局部笔顺" tabindex="-1">局部笔顺 <a class="header-anchor" href="#局部笔顺" aria-label="Permalink to &quot;局部笔顺&quot;">​</a></h2><p>指的是不被打断的字根尽量多。这是为了防止以下情况，一个字 A 有 X Y 两个<strong>离散</strong>部分构成，X 部分拆 X1 X2，根少但不符合笔顺。Y 部分，可以拆 Y1 Y2，符合笔顺，且字根相交；或拆 Y3 Y4，不符合笔顺，但字根分散。如果必须满足<strong>整体符合笔顺</strong>，则 Y 拆 Y1 Y2 虽然符合笔顺，但由于 X 不符合笔顺，A 整体依旧不符合笔顺。那么 Y 应该拆成 Y3 Y4，因为<strong>能散不交</strong>。这样一来，Y 作为独体字和 Y 作为 A 的一部分时，拆分不一致，我们需要避免这种情况。这就是检查<strong>局部笔顺</strong>的原因。</p><h2 id="字根的内在属性" tabindex="-1">字根的内在属性 <a class="header-anchor" href="#字根的内在属性" aria-label="Permalink to &quot;字根的内在属性&quot;">​</a></h2><p>上面我们提到了宇浩输入法拆字规则的优先级。其实，在「字根最少」之上，还有一个隐藏的原则，也就是：<strong>字根的内在属性</strong>。</p><p>何为字根的内在属性？其实就是指某一个字根区别于另一个字根的内在特点。</p>',5),j={class:"tip custom-block"},y=s('<p class="custom-block-title">例</p><p><code>吉</code>拆成<code>士口</code>而不是<code>土口</code>，<code>周</code>拆成<code>⺆土口</code>而不是<code>⺆士口</code>，这是因为<code>土</code>的下面一笔更长，而<code>士</code>的下面一笔更短。这是区别两个字根的本质原因和内在属性。</p>',2),g={class:"flex justify-left flex-wrap"},q=o("p",null,"「内在属性」可以解释为什么有些字这样拆而不是那样拆，有些字为什么看上去违反了「字根最少」的原则。",-1),V={class:"tip custom-block"},C=s('<p class="custom-block-title">例</p><p><code>敝</code>拆为<code>丷巾八攵</code>而非<code>氺巾攵</code>，这看似违反了「字根最少」原则，但其实没有。注意到，<code>敝</code>字左下的笔画是撇不是提；在<code>氺</code>中，左下角的笔画是提不是撇。故而，<code>敝</code>字里并不存在<code>氺</code>字根。正因为如此，我们取四根<code>丷巾八攵</code>而非三根<code>氺巾攵</code>。</p>',2),I={class:"flex justify-left flex-wrap"},N=s('<p>在这个章节，我们就详细讨论字根的内在属性，讨论某些字根在宇浩拆分中被分离或者被合并的原因，从而让某些字的拆分原因更加明确。</p><h3 id="日曰之辨" tabindex="-1">日曰之辨 <a class="header-anchor" href="#日曰之辨" aria-label="Permalink to &quot;日曰之辨&quot;">​</a></h3><p>不少输入法对与<code>日</code> <code>曰</code>两字的区分，比较复杂。大概有两种情况：</p><ul><li>有些是基于形状的，凡是长大于高的都为<code>曰</code>，凡是长短于高的都为<code>日</code>。但这个方法会跟随着字体的不同而不同，有时候不合字源，也不统一。例如：<code>書</code>字源于<code>聿者</code>，<code>曹</code>古字为<code>东东口</code>。</li><li>另外一种区分方法是基于字源。也就是说：凡是在古文中作<code>口</code>形，之后隶变为<code>曰</code>形或<code>甘</code>形的字，都作<code>曰</code>。但这个方法对方一般的使用者难度太大，且分析字源会有疏漏之处，不应用于输入法。</li></ul><p>我们必须注意到，在汉字中，存在<code>日曰</code>对立的字形，只有三组，分别为：<code>日曰</code>、<code>汨汩</code>、<code>曶㫚</code>。在其他的情况下，不存在对立，也就不存在混淆问题。</p><p>因此，我基于<strong>实用主义</strong>原则，对这两个字根不多加以区分，而采取更简单的方法。即：除了上述三组对立情况外，全部取<code>日</code>根。换句话说，<code>曰</code>根只需要在对立情况下才会使用，即：<code>曰</code> <code>汩</code> <code>㫚</code>三个字。</p><p>这样一来，可以显著降低使用者的记忆和学习负担。</p><h3 id="勹之辨" tabindex="-1">勹之辨 <a class="header-anchor" href="#勹之辨" aria-label="Permalink to &quot;勹之辨&quot;">​</a></h3><p><code>旬</code>的外框<code>勹</code>，同<code>敖</code>左下的<code>勹</code>都是撇加横折钩。宇浩输入法不做区分。</p><h3 id="点之辨" tabindex="-1">点之辨 <a class="header-anchor" href="#点之辨" aria-label="Permalink to &quot;点之辨&quot;">​</a></h3><p>这里对含点字根的识别和归并作出解释。</p><div class="info custom-block"><p class="custom-block-title">含点字根</p><ul><li>单点<code>丶</code>和捺<code>乀</code>视为同一个字根。</li><li>相重叠的两点，即<code>头</code> <code>冬</code>中的部分，和<code>二</code>同码位。</li><li>左对点<code>冫</code>和右对点<code>飞右</code>，和<code>二</code>同码位。</li><li>下对点<code>八</code>为一个字根。</li><li>上对点<code>丷</code> <code>䒑</code> <code>リ</code>同大码。</li><li>左<code>⺦</code>为一个字根。</li><li>左三点<code>氵</code>都在一个大码。</li><li>上三点<code>ッ𠁼</code>都在一个大码。</li><li>所有四点<code>灬</code>都在一个大码。</li></ul></div><p><code>为</code> <code>卵</code>等字的两点和<code>冬</code>下的两点不同，非连续笔画，且被半包围或全包围分割，故而不认定为「两点」。详<a href="#散件不分割">「散件不分隔」禁手</a>。</p>',13),Y={class:"flex justify-left flex-wrap"},D=o("h3",{id:"人八入之辨",tabindex:"-1"},[c("人八入之辨 "),o("a",{class:"header-anchor",href:"#人八入之辨","aria-label":'Permalink to "人八入之辨"'},"​")],-1),E=o("p",null,[o("code",null,"人"),c(),o("code",null,"八"),c(),o("code",null,"入"),c("三字易混，这里做出区分。")],-1),R={class:"info custom-block"},z=o("p",{class:"custom-block-title"},"左撇右捺",-1),J=o("p",null,[c("凡左撇不低于右捺，视作"),o("code",null,"人"),c("根。")],-1),X={class:"flex justify-left flex-wrap"},B=o("p",null,[c("凡左撇低于右捺，视作"),o("code",null,"入"),c("根。")],-1),U={class:"flex justify-left flex-wrap"},G=o("p",null,[c("凡左撇右捺分离，视作"),o("code",null,"八"),c("根。")],-1),K={class:"flex justify-left flex-wrap"},O=o("p",null,[c("凡左撇右捺的中间被其他笔画隔开，视作"),o("code",null,"<丿乀>"),c("根。宇码中，它和"),o("code",null,"八"),c("同大小码。")],-1),$={class:"flex justify-left flex-wrap"},F=s('<h3 id="口中无整画" tabindex="-1">口中无整画 <a class="header-anchor" href="#口中无整画" aria-label="Permalink to &quot;口中无整画&quot;">​</a></h3><p>口（音<code>kǒu</code>），囗（音<code>wéi</code>）。这两个根如何区分？</p><p>答案是，如果方框里有<strong>完整</strong>的笔画，用<code>囗</code> <code>wéi</code>。否则一律用<code>口</code> <code>kǒu</code>。</p><div class="tip custom-block"><p class="custom-block-title">例</p><p><code>国</code>字中，有完整的笔画，故而必须用<code>囗</code> <code>wéi</code>。 <code>中</code>字中，虽然<code>⼁</code>穿<code>口</code>而过，但并未被完全包含在<code>口</code>中。由于<code>口</code>中没有完整的笔画，故而用<code>口</code> <code>kǒu</code>。</p></div><p>此规定也适用于另外几个包含<code>口</code>的字根。</p>',5),H={class:"tip custom-block"},L=o("p",{class:"custom-block-title"},"例",-1),M=o("code",null,"古",-1),Q=o("code",null,"口",-1),W=o("code",null,"十囗",-1),Z=o("code",null,"鄙",-1),oo=o("code",null,"口",-1),co=o("code",null,"口",-1),eo=o("code",null,"口十囗口阝",-1),lo={class:"flex justify-left flex-wrap"},so=o("code",null,"合",-1),to=o("code",null,"口",-1),ao=o("code",null,"人一囗",-1),_o=o("code",null,"會",-1),io=o("code",null,"口",-1),no=o("code",null,"小",-1),ro=o("span",{class:"yuniversus"},"人一日",-1),ho={class:"flex justify-left flex-wrap"},po=s('<h2 id="汉字的拆分禁手" tabindex="-1">汉字的拆分禁手 <a class="header-anchor" href="#汉字的拆分禁手" aria-label="Permalink to &quot;汉字的拆分禁手&quot;">​</a></h2><p>拆分之「禁手」，指的是无论任何时候都不应当出现一些拆分情形。它高于一切拆分规则。一旦某一个拆分候选中出现了「禁手」，则直接淘汰。禁手包括：散件不分割、竖向不包夹、横间不穿心。</p><h3 id="散件不分割" tabindex="-1">散件不分割 <a class="header-anchor" href="#散件不分割" aria-label="Permalink to &quot;散件不分割&quot;">​</a></h3><p>有一部分字根，本身存在离散的部件，比如<code>戈</code>字右上的点、<code>犬</code>字的右上的点、<code>三</code>字的三个横等等。为了保证拆字的直观，保证检字（尤其是大字集下）的便捷性，我们需要对字根的连续性做出要求，并将它认定为字根的内在属性。</p><p>字根的连续性定义如下：</p><p>非连续写成、且被全包围结构或半包围结构分割的部件，不视为一个字根。</p>',6),uo={class:"tip custom-block"},fo=o("p",{class:"custom-block-title"},"例",-1),xo=o("p",null,[o("code",null,"为"),c("字的两点不可以被视为字根"),o("code",null,"两点"),c("，因为它们非连续写成、且被半包围结构分割。")],-1),mo={class:"flex justify-left flex-wrap"},bo=o("p",null,[o("code",null,"卵"),c("字不拆"),o("code",null,"卯⺀"),c("而拆成"),o("code",null,"卯丶丶"),c("，因为"),o("code",null,"卯"),c("字的两点非连续写成、且被半包围结构分割。")],-1),To={class:"flex justify-left flex-wrap"},ko=s('<h3 id="竖向不包夹" tabindex="-1">竖向不包夹 <a class="header-anchor" href="#竖向不包夹" aria-label="Permalink to &quot;竖向不包夹&quot;">​</a></h3><p>不少字根中存在若干分散的部件。</p><div class="tip custom-block"><p class="custom-block-title">例</p><p><code>二</code>和<code>三</code>中的横画是分离的。</p><p><code>合</code>分为了<code>人</code> <code>一</code> <code>口</code>三个部分。</p><p><code>儿</code>分为了<code>丿</code> <code>乚</code>两个部分。</p></div><p>这给了它们包夹其他字根的可能。如<code>亘</code>可看成<code>二</code>包夹<code>日</code>。</p><p>为了防止拆分不直观，我们做出规定，一个字根<strong>可以横向包夹，但不能纵向包夹</strong>。</p>',5),vo={class:"tip custom-block"},Po=o("p",{class:"custom-block-title"},"例",-1),Ao=o("p",null,[o("code",null,"卿"),c(" = "),o("code",null,"卯彐厶")],-1),So={class:"flex justify-left flex-wrap"},wo=o("p",null,[o("code",null,"胤"),c(" = "),o("code",null,"儿幺月")],-1),jo={class:"flex justify-left flex-wrap"},yo=o("p",null,[o("code",null,"亘"),c(" = "),o("code",null,"一日一")],-1),go={class:"flex justify-left flex-wrap"},qo=o("p",null,[o("code",null,"僵"),c(" = "),o("code",null,"亻一田一田一")],-1),Vo={class:"flex justify-left flex-wrap"},Co=o("p",null,"这是因为，汉字的左右对称多于上下对称。左右包夹是可预测的，但上下包夹往往不可预测，必须要观察到最下方。",-1),Io={class:"tip custom-block"},No=o("p",{class:"custom-block-title"},"如果设置了衣字根",-1),Yo=o("p",null,[c("某些输入法设置了"),o("code",null,"衣下"),c("字根，但"),o("code",null,"亠"),c("和"),o("code",null,"𧘇"),c("的出现并不总是成对的，必须看到最下方才能正确判断。")],-1),Do={class:"flex justify-left flex-wrap"},Eo=o("h3",{id:"横间不穿心",tabindex:"-1"},[c("横间不穿心 "),o("a",{class:"header-anchor",href:"#横间不穿心","aria-label":'Permalink to "横间不穿心"'},"​")],-1),Ro=o("p",null,"为了使拆分更加直观，符合笔顺，防止字根交叉粘连，我们规定：",-1),zo=o("p",null,[o("code",null,"工土士干千禾キ王壬龶丰末未生古矢缶早羊虫"),c("等字根不允许在"),o("code",null,"一一"),c("间穿插其他字根。")],-1),Jo=o("p",null,"这个规定在常用字中比较少用。",-1),Xo={class:"tip custom-block"},Bo=o("p",{class:"custom-block-title"},"例",-1),Uo=o("p",null,[o("code",null,"再"),c("不拆"),o("code",null,"王冂"),c("，而拆"),o("code",null,"一冂土")],-1),Go={class:"flex justify-left flex-wrap"},Ko=o("p",null,[o("code",null,"垂"),c("不拆"),o("code",null,"壬龷"),c("，而拆"),o("code",null,"千龷一")],-1),Oo={class:"flex justify-left flex-wrap"},$o=o("p",null,[o("code",null,"禹"),c("不拆"),o("code",null,"丿虫冂"),c("，而拆"),o("code",null,"丿口冂<丄丶>")],-1),Fo={class:"flex justify-left flex-wrap"},Ho=o("p",null,[o("code",null,"妻"),c("不拆 "),o("code",null,"キコ女"),c("或"),o("code",null,"龶乛女"),c("，而拆"),o("code",null,"十彐女"),c("。")],-1),Lo={class:"flex justify-left flex-wrap"},Mo=s('<h2 id="归并聚类" tabindex="-1">归并聚类 <a class="header-anchor" href="#归并聚类" aria-label="Permalink to &quot;归并聚类&quot;">​</a></h2><p>归并有两种：</p><ol><li>依字源归并。指的是将字源相关的部首（部件）视为同一个字根，赋与相同的编码（大码+小码）。</li><li>依字形归并。指的是将字形相近的部首（部件）视为同一个字根，赋与相同的编码（大码+小码）。</li></ol><p>聚类，指的是将字形相近的部首（部件）视为同一类字根，赋与相同的大码。</p><p>宇浩的字根设计，是<strong>轻归并、重聚类</strong>的。</p><p>选择「重聚类」的原因，主要是对了降低初学者的学习难度。初学者，要同时记忆字根编码、拆分规则、编码规则。这个思维负担很大，因此，将相似字根放在一个大码上，有利于联想记忆。</p>',6),Qo={class:"tip custom-block"},Wo=o("p",{class:"custom-block-title"},"例",-1),Zo=o("p",null,[c("以下四字的第一个字根，都包括了"),o("code",null,"广"),c("的特性，因此放在同一个大码上，有利于记忆。用户只要记住"),o("code",null,"广"),c("的位置，便知道了其他三个字根的位置。")],-1),oc=o("p",null,[c("以下四字的第一个字根，都包括了"),o("code",null,"丆"),c("的特性，因此放在同一个大码上，有利于记忆。用户只要记住"),o("code",null,"丆"),c("的位置，便知道了其他三个字根的位置。")],-1),cc=o("p",null,[c("以下四个字根，都包括了"),o("code",null,"目"),c("的特性，因此放在同一个大码上，有利于记忆。用户只要记住"),o("code",null,"目"),c("的位置，便知道了其他三个字根的位置。")],-1),ec=o("p",null,"选择「轻归并」的原因，主要是以下几点：",-1),lc=o("p",null,[c("一、字源归并有时会导致繁简字根（部首）同码。好处是用户可以少记20个繁体字根"),o("code",null,"鳥烏魚馬風來車長門鬥齒飛見貝鹵僉韋咼黽"),c("。缺点是部分繁简汉字无法有效分离，和宇码设计理念不符。")],-1),sc={class:"tip custom-block"},tc=o("p",{class:"custom-block-title"},"例",-1),dc=o("p",null,"按字源归并后，以下汉字必定重码。",-1),ac=o("p",null,[c("二、部首字源归并会导致大量字形不相近的字根（部首）被识别出来，成为「隐藏根」，这部分字根主要位于大字集。有时候，这些根比较直观；但有时候，需要一定经验才能知道这个根是否已经被归并，还是需要继续拆分。增加记忆负担，降低大字集检字效率。比如："),o("code",null,"乕𠁅處𭅍𭙧"),c("等字的头部，虽写法相异，但源头相同。打字中，它们是否是一个字根，需要用户有一定的了解。")],-1),_c=o("p",null,"三、因为汉字演变，部分部首写法相同，但源流各异；部分部首写法相异，但源流相同。这可能会造成用户的记忆负担。",-1),ic=o("p",null,"当然，归并还是有相当价值的，特别是当字形非常接近，一般人甚至无法意识到其区别的时候，就算其字源不一、读音迥异，也应当归并。",-1),nc={class:"tip custom-block"},rc=o("p",{class:"custom-block-title"},"例",-1),hc=o("p",null,[c("以下两字的右边部首，一个是"),o("code",null,"𠤎"),c("（ㄏㄨㄚ），一个是"),o("code",null,"匕"),c("（ㄅㄛ）。较难区分，故而合为一个字根"),o("code",null,"匕"),c("。")],-1),vc=JSON.parse('{"title":"进阶讨论","description":"","frontmatter":{},"headers":[],"relativePath":"learn/advanced.md","filePath":"learn/advanced.md"}'),pc={name:"learn/advanced.md"},Pc=Object.assign(pc,{setup(uc){return(fc,xc)=>(a(),d("div",null,[_,o("div",i,[n,r,o("div",h,[e(l,{char:"攀",parts:[4,2,2,4,3,4],colors:[1,2,3,0,0,4]}),c(" 陆 "),e(l,{char:"攀",parts:[4,2,2,4,3,4],colors:[3,1,2,0,0,4]}),c(" 台 ")]),p,o("div",u,[e(l,{char:"與",parts:[4,2,1,3,1,2],colors:[1,2,3,1,3,4]}),c(" 陆 "),e(l,{char:"與",parts:[4,2,1,3,1,2],colors:[3,1,2,3,0,4]}),c(" 台 ")])]),f,x,o("div",m,[b,o("ol",null,[o("li",null,[T,o("div",k,[e(l,{char:"主",parts:[1,4]}),c(" ✅ "),e(l,{char:"主",parts:[2,3]}),c(" ❌ ")])]),o("li",null,[v,o("div",P,[e(l,{char:"兰",parts:[3,2]}),c(" ✅ "),e(l,{char:"兰",parts:[2,3]}),c(" ❌ ")])]),o("li",null,[A,o("div",S,[e(l,{char:"垂",parts:[3,4,1]}),c(" ✅ "),e(l,{char:"垂",parts:[3,3,2]}),c(" ❌ ")])])])]),w,o("div",j,[y,o("div",g,[e(l,{char:"吉",parts:[3,3]}),e(l,{char:"周",parts:[2,3,3]})])]),q,o("div",V,[C,o("div",I,[e(l,{char:"敝",parts:[2,3,2,4]}),c(" ✅ "),e(l,{char:"敝",parts:[2,2,3,4],colors:[1,2,1,3]}),c(" ❌ ")])]),N,o("div",Y,[e(l,{char:"冬",parts:[3,2],colors:[0,1]}),c(" ✅ "),e(l,{char:"为",parts:[1,2,1],colors:[1,0,1]}),c(" ❌ "),e(l,{char:"卵",parts:[2,1,1,2,1],colors:[0,1,0,0,1]}),c(" ❌ ")]),D,E,o("div",R,[z,o("ol",null,[o("li",null,[J,o("div",X,[e(l,{char:"令",parts:[2,1,3],colors:[1,0,0]}),e(l,{char:"内",parts:[2,2],colors:[0,1]}),e(l,{char:"两",parts:[1,2,2,2],colors:[0,0,1,2]})])]),o("li",null,[B,o("div",U,[e(l,{char:"籴",parts:[2,6],colors:[1,0]}),e(l,{char:"陝",parts:[2,1,2,2,2],colors:[0,0,0,1,2]}),e(l,{char:"兩",parts:[1,3,2,2],colors:[0,0,1,2]})])]),o("li",null,[G,o("div",K,[e(l,{char:"分",parts:[2,2],colors:[1,0]}),e(l,{char:"兴",parts:[4,2],colors:[0,1]}),e(l,{char:"典",parts:[6,2],colors:[0,1]})])]),o("li",null,[O,o("div",$,[e(l,{char:"办",parts:[2,2],colors:[0,1]}),e(l,{char:"朱",parts:[4,2],colors:[0,1]}),e(l,{char:"兼",parts:[8,2],colors:[0,1]})])])])]),F,o("div",H,[L,o("ul",null,[o("li",null,[M,c("下的"),Q,c("中如果包含完整的笔画，应该拆如"),W,c("。例如："),Z,c("左下方的"),oo,c("中有"),co,c("，故而应该拆成"),eo,c("。 "),o("div",lo,[e(l,{char:"鄙",parts:[3,2,2,3,1,2],colors:[1,2,3,4,3,5]}),c(" ✅ "),e(l,{char:"鄙",parts:[3,4,3,1,2],colors:[1,2,3,2,4]}),c(" ❌ ")])]),o("li",null,[so,c("下的"),to,c("中如果包含完整的笔画，应该拆如"),ao,c("。例如："),_o,c("中间的"),io,c("中有"),no,c("，故而应该拆成"),ro,c("。 "),o("div",ho,[e(l,{char:"會",parts:[2,1,6,4],colors:[1,2,3,4]}),c(" ✅ "),e(l,{char:"會",parts:[5,3,1,4],colors:[1,2,1,3]}),c(" ❌ ")])])])]),po,o("div",uo,[fo,xo,o("div",mo,[e(l,{char:"为",parts:[1,2,1]}),c(" ✅ "),e(l,{char:"为",parts:[1,2,1],colors:[1,2,1]}),c(" ❌ ")]),bo,o("div",To,[e(l,{char:"卵",parts:[2,1,1,2,1],colors:[1,2,1,1,3]}),c(" ✅ "),e(l,{char:"卵",parts:[2,1,1,2,1],colors:[1,2,1,1,2]}),c(" ❌ ")])]),ko,o("div",vo,[Po,Ao,o("div",So,[e(l,{char:"卿",parts:[3,3,2,2],colors:[1,0,0,1]}),c(" ✅ "),e(l,{char:"卿",parts:[3,3,2,2],colors:[1,0,0,4]}),c(" ❌ ")]),wo,o("div",jo,[e(l,{char:"胤",parts:[1,3,4,1],colors:[1,0,0,1]}),c(" ✅ "),e(l,{char:"胤",parts:[1,3,4,1],colors:[1,0,0,4]}),c(" ❌ ")]),yo,o("div",go,[e(l,{char:"亘",parts:[1,4,1],colors:[1,0,3]}),c(" ✅ "),e(l,{char:"亘",parts:[1,4,1],colors:[1,0,1]}),c(" ❌ ")]),qo,o("div",Vo,[e(l,{char:"僵",parts:[2,1,5,1,5,1],colors:[0,2,0,4,0,6]}),c(" ✅ "),e(l,{char:"僵",parts:[2,1,5,1,5,1],colors:[0,2,0,2,0,2]}),c(" ❌ ")])]),Co,o("div",Io,[No,Yo,o("div",Do,[e(l,{char:"襄",parts:[2,11,4],colors:[1,0,1]}),e(l,{char:"衮",parts:[2,4,4],colors:[1,0,1]}),e(l,{char:"兖",parts:[2,4,2],colors:[1,0,2]})])]),Eo,Ro,zo,Jo,o("div",Xo,[Bo,Uo,o("div",Go,[e(l,{char:"再",parts:[1,2,3]}),c(" ✅ "),e(l,{char:"再",parts:[1,2,3],colors:[1,0,1]}),c(" ❌ ")]),Ko,o("div",Oo,[e(l,{char:"垂",parts:[3,4,1],colors:[1,2,3]}),c(" ✅ "),e(l,{char:"垂",parts:[3,4,1],colors:[1,0,1]}),c(" ❌ ")]),$o,o("div",Fo,[e(l,{char:"禹",parts:[1,3,2,3],colors:[1,2,3,4]}),c(" ✅ "),e(l,{char:"禹",parts:[1,3,2,3],colors:[0,1,0,1]}),c(" ❌ ")]),Ho,o("div",Lo,[e(l,{char:"妻",parts:[1,3,1,3],colors:[1,2,1,3]}),c(" ✅ "),e(l,{char:"妻",parts:[1,1,1,1,1,3],colors:[1,0,1,0,1,3]}),c(" ❌ "),e(l,{char:"妻",parts:[1,1,3,3],colors:[1,0,1,3]}),c(" ❌ ")])]),Mo,o("div",Qo,[Wo,Zo,e(t,{chars:"廣病磨慶",size:60,loc:"left"}),oc,e(t,{chars:"石百不压",size:60,loc:"left"}),cc,e(t,{chars:"目且貝見",size:60,loc:"left"})]),ec,lc,o("div",sc,[tc,dc,e(t,{chars:"說说員员",size:60,loc:"left"})]),ac,_c,ic,o("div",nc,[rc,hc,e(t,{chars:"化比",size:75,loc:"left"})])]))}});export{vc as __pageData,Pc as default};
